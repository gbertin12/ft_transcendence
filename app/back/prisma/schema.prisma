generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int              @id @default(autoincrement())
    name              String           @unique
    avatar            String           @default("default.jpg")
    wins              Int              @default(0)
    losses            Int              @default(0)
    elo               Int              @default(1000)
    otp               Boolean          @default(false)
    otpSecret         String?
    otpVerified       Boolean          @default(false)
    password          String?
    channels          Channel[]
    sent_requests     FriendRequest[]  @relation("friend_request_sender")
    received_requests FriendRequest[]  @relation("friend_request_receiver")
    gamesWon          MatchHistory[]   @relation("wonGame")
    gamesLost         MatchHistory[]   @relation("lostGame")
    Message           Message[]
    BlockedUser       BlockedUser[]
    friend            Friend[]         @relation("friend")
    friend2           Friend[]         @relation("friend2")
    ChannelInvites    ChannelInvites[]
    PrivateMessage    PrivateMessage[]
    punished          Punishment[]     @relation("punished")
    punisher          Punishment[]     @relation("punisher")
    ChannelAdmin      ChannelAdmin[]
    ChannelAccess     ChannelAccess[]
}

model MatchHistory {
    id          Int      @id @default(autoincrement())
    winner      User     @relation("wonGame", fields: [winnerId], references: [id])
    winnerId    Int
    winnerScore Int
    winnerElo   Int
    looser      User     @relation("lostGame", fields: [looserId], references: [id])
    looserId    Int
    looserScore Int
    looserElo   Int
    date        DateTime @default(now()) @db.Timestamp(6)
    eloDiff     Int
    mode        Boolean
    //duration    Int
}

model Friend {
    user_id     Int
    friend_id   Int
    friended_at DateTime @default(now()) @db.Timestamp(6)
    user        User?    @relation("friend", fields: [friend_id], references: [id])
    user2       User?    @relation("friend2", fields: [user_id], references: [id])

    @@id([user_id, friend_id])
    @@index([user_id, friend_id], name: "user_id_friend_id")
    @@index([friend_id, user_id], name: "friend_id_user_id")
}

model BlockedUser {
    user_id    Int
    blocked_id Int
    blocked_at DateTime @default(now()) @db.Timestamp(6)
    user       User?    @relation(fields: [blocked_id], references: [id])

    @@id([user_id, blocked_id])
    @@index([user_id, blocked_id], name: "user_id_blocked_id")
}

model FriendRequest {
    sender_id    Int
    receiver_id  Int
    requested_at DateTime @default(now()) @db.Timestamp(6)
    sender       User     @relation(name: "friend_request_sender", fields: [sender_id], references: [id])
    receiver     User     @relation(name: "friend_request_receiver", fields: [receiver_id], references: [id])

    @@id([sender_id, receiver_id])
}

model Channel {
    id             Int              @id @default(autoincrement())
    name           String           @db.VarChar(64)
    topic          String           @db.VarChar(128)
    private        Boolean          @default(false) @db.Boolean
    creation_date  DateTime         @default(now()) @db.Timestamp(6)
    owner_id       Int
    password       String?          @db.VarChar(128)
    owner          User             @relation(fields: [owner_id], references: [id])
    channel_access ChannelAccess[]
    admins         ChannelAdmin[]
    ChannelInvites ChannelInvites[]
}

model ChannelAccess {
    channel_id Int
    user_id    Int
    channel    Channel @relation(fields: [channel_id], references: [id])
    user       User    @relation(fields: [user_id], references: [id])

    @@id([channel_id, user_id])
}

model ChannelInvites {
    sender_id   Int
    receiver_id Int
    channel_id  Int
    invited_at  DateTime @default(now()) @db.Timestamp(6)
    sender      User     @relation(fields: [sender_id], references: [id])
    channel     Channel  @relation(fields: [channel_id], references: [id])

    @@id([sender_id, receiver_id, channel_id])
}

model ChannelAdmin {
    channel_id Int
    user_id    Int
    channel    Channel? @relation(fields: [channel_id], references: [id])
    user       User?    @relation(fields: [user_id], references: [id])

    @@id([channel_id, user_id])
}

model Message {
    channel_id Int
    sender_id  Int
    message_id Int      @id @default(autoincrement())
    timestamp  DateTime @default(now()) @db.Timestamp(6)
    content    String   @db.VarChar(2000)
    sender     User     @relation(fields: [sender_id], references: [id])

    @@index([channel_id, timestamp], name: "channel_id_timestamp")
}

model Punishment {
    issuer_id   Int
    punished_id Int
    channel_id  Int
    type        Int      @db.SmallInt
    punished_at DateTime @default(now()) @db.Timestamp(6)
    expires_at  DateTime @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '1 HOUR'")) @db.Timestamp(6) // default
    punished    User     @relation("punished", fields: [punished_id], references: [id])
    punisher    User     @relation("punisher", fields: [issuer_id], references: [id])

    @@id([issuer_id, punished_id, channel_id])
    @@index([punished_id, issuer_id, type], name: "punished_id_issuer_id_type")
    @@index([punished_id, channel_id, type], name: "punished_id_channel_id_type")
}

model PrivateMessage {
    message_id  Int      @id @default(autoincrement())
    sender_id   Int
    receiver_id Int
    timestamp   DateTime @default(now()) @db.Timestamp(6)
    content     String   @db.VarChar(2000)
    sender      User     @relation(fields: [sender_id], references: [id])

    @@index([sender_id, receiver_id, timestamp], name: "sender_id_receiver_id_timestamp")
}
